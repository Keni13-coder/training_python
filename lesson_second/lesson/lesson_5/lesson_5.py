"a,b,c = ('1','2','3')- распоковка также используется символ * "
# z = (i for i in range(10)) * так же распаковывается генераторы
# a,b,c,*d,e = {10,9,8,1,6,3} -  сет хранит всебе хеши, из за этого при распаковки он сортирует по возрастанию 1 3 6 [8, 9] 10

# z = (i for i in range(10)) - генератор можно пользоваться 1 раз полсе он удаляеться *z [0,1,2,3,4,5,6,7,8,9], 2 раз []
# d = range(10) - генератор
'iter() - создаёт типовонный итератор в памяти : list_iterator object, set_iterator object'
'next()-при каждомвызове выводит 1 элемент итератора, последовательный вызов итерирует значение'
'yeld - возврощает генераторное выражение, запоминает предыдущие значение yeld'
# class carsDistributor():
#     # бесконечный генератор
#     stock = True
#     def turnon(self):
#         while self.stock:
#             yield "Автомобиль"
            
# ddd = carsDistributor()
# tu = ddd.turnon() 
        


'''Пользователь вводит строку из четырёх 
или более целых чисел, разделённых символом “/”. 
Сформируйте словарь, где:
✔второе и третье число являются ключами.
✔первое число является значением для первого ключа.
✔четвертое и все возможные последующие числа 
 хранятся в кортеже как значения второго ключа.
'''

def task_1(st:str):
    a,b,c,*d = map(int,st.split('/'))
    return {b:a, c:tuple(d)}


# print(task_1('1/2/3/4/5'))    


'''
Самостоятельно сохраните в переменной строку текста. 
✔ Создайте из строки словарь, где ключ — буква, а значение — код буквы. 
✔ Напишите преобразование в одну строку. 

'''

def task_2(tekst:str):
    return {x:ord(x) for x in tekst}


# print(task_2('Напишите преобразование в одну строку'))

'''
✔ Продолжаем развивать задачу 2. 
✔ Возьмите словарь, который вы получили. 
Сохраните его итераторатор. 
✔ Далее выведите первые 5 пар ключ-значение, 
обращаясь к итератору, а не к словарю.

'''

def task_3(tekst:str): 
   return iter({x:ord(x) for x in tekst}.items())

# iterator = task_3('Напишите преобразование в одну строку')
# for _ in iterator:
#     print(next(iterator))
    
    
'''
Создайте генератор чётных чисел от нуля до 100. 
✔ Из последовательности исключите 
числа, сумма цифр которых равна 8. 
✔ Решение в одну строку.
'''  


def task_4():
   return (v for v in range(0,100,2) if sum(int(i) for i in str(v)) !=8)


# print([x for x in task_4()])

'''
Задание №5
✔ Напишите программу, которая выводит 
на экран числа от 1 до 100. 
✔ При этом вместо чисел, кратных трем, 
программа должна выводить слово «Fizz»
✔ Вместо чисел, кратных пяти — слово «Buzz». 
✔ Если число кратно и 3, и 5, то программа 
должна выводить слово «FizzBuzz».
✔ *Превратите решение в генераторное выражение.

'''

def task_5():
    # for x in range(1,100):
    #     if x % 15 == 0:
    #         yield 'FizzBuzz'
    #     elif x % 3 == 0:
    #         yield 'Fizz'
    #     elif x % 5 == 0:
    #         yield 'Buzz'
    #     else:
    #         yield x
     return ('FizzBuzz' if x % 15 == 0 else 'Fizz' if x % 3==0 else 'Buzz' if x % 5 == 0 else x for x in range(1,100))           
        
        
# for x in task_5():
#     print(x)
    
'''

Задание №6
✔ Выведите в консоль таблицу умножения 
от 2х2 до 9х10 как на школьной тетрадке. 
✔ Таблицу создайте в виде однострочного 
генератора, где каждый элемент генератора — 
отдельный пример таблицы умножения. 
✔ Для вывода результата используйте «принт» 
без перехода на новую строку.
'''
from collections.abc import Generator
def t_6()->Generator[list[str]]:
    MAX_RANGE = 10
    MIN_RANGE = 2
    INDENT = 2
    gener=([f'{i:>{INDENT}} * {j} = {i*j:>{INDENT}}' for j in range(MIN_RANGE,MAX_RANGE)] for i in range(MIN_RANGE,MAX_RANGE) )
    return gener
            

# for j,z in enumerate(zip(*list(t_5())[:4]),1):
#         for i,x in enumerate(z,1):
#             if i % 4 != 0:
#                     print(f'{x}\t',end='')
#             else:
#                 print(x)
# print()               
# for j,z in enumerate(zip(*list(t_5())[4:]),1):
#         for i,x in enumerate(z,1):
#             if i % 4!= 0:
#                     print(f'{x}\t',end='')
#             else:
#                 print(x)

'''
Задание №7
✔ Создайте функцию-генератор. 
✔ Функция генерирует N простых чисел, 
начиная с числа 2. 
✔ Для проверки числа на простоту используйте 
правило: «число является простым, если делится 
нацело только на единицу и на себя»

'''

def task_7(n):
    # gener = (x for x in range(2,n) if x == 2 or x **.5 % 1 !=0 and x ** 1/3 % 1 !=0)
    # return gener
    count = 0
    start = 2
    while True:
        if count == n:
            break
        if start == 2 or start ** .5 % 1 != 0 and start ** 1/3 %1 !=0:
            count +=1
            yield start
        if start ==2:    
            start += 1    
        else:
            start += 2

# print(list(filter(lambda x: x == 2 or x **.5 % 1 !=0 and x ** 1/3 % 1 !=0,range(2,10)))) прикольный вариант 


for x in task_7(10):
    print(x)



print(0.0 == 0)
